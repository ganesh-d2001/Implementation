name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    # Set up SSH to access the remote server
    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan 34.135.120.96 >> ~/.ssh/known_hosts

    # Log in to the Docker registry (replace 'docker.io' with your private registry URL)
    - name: Log in to Docker registry
      run: |
        docker login --username=ganeshd2532 --password=dreancatcher@2001

    # Build the Docker image
    - name: Build the Docker image
      run: |
        docker build -t prod_data:1 .

    # Tag the image for pushing to the private repository
    - name: Tag Docker image for private repo
      run: |
        docker tag prod_data:1 docker.io/ganeshd2532/prod_data:1

    # Push the image to the private Docker repository
    - name: Push Docker image to private repo
      run: |
        docker push docker.io/ganeshd2532/prod_data:1

    # Save the Docker image as a tarball file
    - name: Save Docker image to tarball
      run: |
        docker save prod_data:1 -o prod_data_image.tar

    # Copy the tarball to the remote server via SSH
    - name: Copy image to remote server
      run: |
        scp prod_data_image.tar ganeshd@34.135.120.96:/home/ganeshd/Implementation/

    # Load the Docker image on the remote server, remove existing container and image, and run the new image
    - name: Load and run Docker image on remote server
      run: |
        ssh ganeshd@34.135.120.96 << 'EOF'
          docker stop prod_container || true
          docker rm prod_container || true
          docker rmi prod_data:1 || true
          docker load -i /home/ganeshd/Implementation/prod_data_image.tar
          
          # Create a volume for PostgreSQL data if it doesn't exist
          docker volume create pgdata_volume
          
          # Run the container with the volume mounted
          docker run -d --name prod_container -p 5000:5000 -p 5432:5432 \
            -v pgdata_volume:/var/lib/postgresql/data \
            prod_data:1
        EOF
